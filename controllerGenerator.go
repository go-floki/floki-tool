package main

import (
	"bufio"
	"log"
	"os"
	"strings"
	"text/template"
	"unicode"
)

var (
	controllerHeader = `// this file was automatically generated by floki-tool
package controllers
{{$lowName := .Name | lowercase}}
{{$service := printf "%sServiceApi" $lowName}}

import (
	"github.com/go-floki/floki"
	"models"
	"services"
	"strconv"
)

var {{$service}} = services.{{.Name}}Service

func init{{.Name | capitalize}}Api(m *floki.Floki) {
	{{$mName := printf "%sApiList" $lowName}}{{if symbolExists .Symbols $mName}}
	m.GET("/api/{{$lowName}}", {{$lowName}}ApiList)
	{{end}}
	{{$mName := printf "%sApiGet" $lowName}}{{if symbolExists .Symbols $mName}}
	m.GET("/api/{{$lowName}}/:id", {{$lowName}}ApiGet)
	{{end}}
	{{$mName := printf "%sApiCreate" $lowName}}{{if symbolExists .Symbols $mName}}
	m.PUT("/api/{{$lowName}}", {{$lowName}}ApiCreate)
	{{end}}
	{{$mName := printf "%sApiUpdate" $lowName}}{{if symbolExists .Symbols $mName}}
	m.PUT("/api/{{$lowName}}/:id", {{$lowName}}ApiUpdate)
	{{end}}
	{{$mName := printf "%sApiDelete" $lowName}}{{if symbolExists .Symbols $mName}}
	m.DELETE("/api/{{$lowName}}/:id", {{$lowName}}ApiDelete)
	{{end}}
}


/// API ////

{{$mName := printf "%sApiList" $lowName}}{{if symbolExists .Symbols $mName}}
func {{$mName}}(c *floki.Context) {
	var entities []*models.{{.Name}}

	result, err := {{$service}}.FetchByQuery(new(models.{{.Name}}), c.Request.URL.Query(), &entities)
	if err != nil {
		c.Send(404, "Invalid id")
		return
	}

	c.SendJson(200, floki.Model{
		"total": result.Total,
		"data":  entities,
	})
}
{{end}}


{{$mName := printf "%sApiGet" $lowName}}{{if symbolExists .Symbols $mName}}
func {{$mName}}(c *floki.Context) {
    entity := models.{{.Name}}{}

    id, err := strconv.Atoi(c.Params.ByName("id"))
    if err != nil {
        c.Send(404, "Invalid id")
        return
    }

    {{$service}}.Get(int64(id), &entity)

    c.SendJson(200, entity)
}
{{end}}

{{$mName := printf "%sApiUpdate" $lowName}}{{if symbolExists .Symbols $mName}}
func {{$mName}}(c *floki.Context) {
    log := c.Logger()

    c.Request.ParseMultipartForm(1024 * 1024 * 4)

    entity := models.{{.Name}}{}

    id, err := strconv.Atoi(c.Params.ByName("id"))
    if err != nil {
        c.Send(404, "Invalid id")
        return
    }

    {{$service}}.Get(int64(id), &entity)

    form := c.Request.Form

    {{$service}}.FromForm(&entity, form)

    _, err = {{$service}}.Save(&entity)
    if err != nil {
        log.Println(err)
    }

    c.SendJson(200, floki.Model{
        "ok": true,
    })

}
{{end}}


{{$mName := printf "%sApiCreate" $lowName}}{{if symbolExists .Symbols $mName}}
func {{$mName}}(c *floki.Context) {
    log := c.Logger()

    c.Request.ParseMultipartForm(1024 * 1024 * 4)

    entity := models.{{.Name}}{}

    form := c.Request.Form

    {{$service}}.FromForm(&entity, form)

    _, err := {{$service}}.Create(&entity)
    if err != nil {
        log.Println(err)
    }

    c.SendJson(200, floki.Model{
        "ok": err == nil,
    })

}
{{end}}

{{$mName := printf "%sApiDelete" $lowName}}{{if symbolExists .Symbols $mName}}
func {{$mName}}(c *floki.Context) {
    entity := models.{{.Name}}{}

    id, err := strconv.Atoi(c.Params.ByName("id"))
    if err != nil {
        c.Send(404, "Invalid id")
        return
    }

    {{$service}}.Get(int64(id), &entity)
    {{$service}}.Delete(&entity)

    c.SendJson(200, floki.Model{"ok": true})
}
{{end}}
`
)

type ControllerGenerator struct {
	writer    *bufio.Writer
	headerTpl *template.Template
}

func RemoveControllerFiles(dir string, models map[string]*Model) {
	for _, model := range models {
		os.Remove(dir + "/controllers/" + strings.ToLower(model.Name) + "Api.go")
	}
}

func GenerateControllers(dir string, models map[string]*Model, existingSymbols map[string]string) {
	funcMap := template.FuncMap{
		"capitalize": func(a interface{}) interface{} {
			str := a.(string)
			for i, v := range str {
				return string(unicode.ToUpper(v)) + str[i+1:]
			}
			return ""
		},

		"decapitalize": func(a interface{}) interface{} {
			str := a.(string)
			for i, v := range str {
				return string(unicode.ToLower(v)) + str[i+1:]
			}
			return ""
		},

		"lowercase": func(a interface{}) interface{} {
			switch n := a.(type) {
			case string:
				return strings.ToLower(n)
			default:
				return "XXXX"
			}
		},

		"symbolExists": func(symbols map[string]string, symbol string) bool {
			_, ok := symbols[symbol]
			if ok {
				return false
			}

			return true
		},
	}

	headerTpl, _ := template.New("header").Funcs(funcMap).Parse(controllerHeader)

	for _, model := range models {
		lowered := strings.ToLower(model.Name)

		_, m1 := existingSymbols[lowered+"ApiGet"]
		_, m2 := existingSymbols[lowered+"ApiList"]
		_, m3 := existingSymbols[lowered+"ApiCreate"]
		_, m4 := existingSymbols[lowered+"ApiUpdate"]
		_, m5 := existingSymbols[lowered+"ApiDelete"]
		if m1 && m2 && m3 && m4 && m5 {
			log.Println("won't generate controllers for", model.Name, ", because it's already defined.")
			continue
		}

		file, err := os.Create(dir + "/controllers/" + strings.ToLower(model.Name) + "Api.go")
		if err != nil {
			log.Fatalln(err)
		}

		defer file.Close()

		g := ControllerGenerator{
			writer:    bufio.NewWriter(file),
			headerTpl: headerTpl,
		}

		g.writeHeader(model.Name, existingSymbols)

		/*
			for _, field := range model.Fields {
				g.addFinder(model.Name, field)
			}
		*/
		g.writer.Flush()
	}

}

/*
func (g ControllerGenerator) addFinder(modelName string, field *Field) {
	g.methodTpl.Execute(g.writer, MethodParams{
		Name:      field.Names[0],
		FieldType: field.Type,
		ModelName: modelName,
	})

}
*/

func (g ControllerGenerator) writeHeader(name string, existingSymbols map[string]string) {
	g.headerTpl.Execute(g.writer, ModuleParams{
		Name:    name,
		Symbols: existingSymbols,
	})
}
